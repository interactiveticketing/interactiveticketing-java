/*
 * Developer API
 * Get your API Key from the [Dashboard](/dashboard/).<br/>Send all API requests with http header `X-API-Key: YOUR-API-KEY-HERE`.<br/>Base URL: `https://secure.interactiveticketing.com/developers/api/v2`<br/>Contact support@interactiveticketing.com for help.
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package Models;

import java.util.Objects;
import java.util.Arrays;
import Models.Scan;
import Models.ScanPointConfig;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * OfflineTicket
 */


public class OfflineTicket {
  @SerializedName("offlineTicketId")
  private Integer offlineTicketId = null;

  @SerializedName("testTicket")
  private Boolean testTicket = null;

  @SerializedName("barcode")
  private String barcode = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("price")
  private String price = null;

  @SerializedName("details")
  private String details = null;

  @SerializedName("slotDate")
  private String slotDate = null;

  @SerializedName("slotTime")
  private String slotTime = null;

  @SerializedName("seatCustom1")
  private String seatCustom1 = null;

  @SerializedName("seatCustom2")
  private String seatCustom2 = null;

  @SerializedName("seatSection")
  private String seatSection = null;

  @SerializedName("seatRow")
  private String seatRow = null;

  @SerializedName("seatNumber")
  private Integer seatNumber = null;

  @SerializedName("canceled")
  private Boolean canceled = null;

  @SerializedName("_scans")
  private List<Scan> _scans = null;

  @SerializedName("_scanPointConfig")
  private ScanPointConfig _scanPointConfig = null;

  public OfflineTicket offlineTicketId(Integer offlineTicketId) {
    this.offlineTicketId = offlineTicketId;
    return this;
  }

   /**
   * The ticket ID
   * @return offlineTicketId
  **/
  @Schema(description = "The ticket ID")
  public Integer getOfflineTicketId() {
    return offlineTicketId;
  }

  public void setOfflineTicketId(Integer offlineTicketId) {
    this.offlineTicketId = offlineTicketId;
  }

  public OfflineTicket testTicket(Boolean testTicket) {
    this.testTicket = testTicket;
    return this;
  }

   /**
   * True if test mode
   * @return testTicket
  **/
  @Schema(description = "True if test mode")
  public Boolean isTestTicket() {
    return testTicket;
  }

  public void setTestTicket(Boolean testTicket) {
    this.testTicket = testTicket;
  }

  public OfflineTicket barcode(String barcode) {
    this.barcode = barcode;
    return this;
  }

   /**
   * The ticket barcode
   * @return barcode
  **/
  @Schema(description = "The ticket barcode")
  public String getBarcode() {
    return barcode;
  }

  public void setBarcode(String barcode) {
    this.barcode = barcode;
  }

  public OfflineTicket name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of ticket
   * @return name
  **/
  @Schema(description = "Name of ticket")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public OfflineTicket price(String price) {
    this.price = price;
    return this;
  }

   /**
   * Purchase price for the ticket
   * @return price
  **/
  @Schema(description = "Purchase price for the ticket")
  public String getPrice() {
    return price;
  }

  public void setPrice(String price) {
    this.price = price;
  }

  public OfflineTicket details(String details) {
    this.details = details;
    return this;
  }

   /**
   * Details about the ticket
   * @return details
  **/
  @Schema(description = "Details about the ticket")
  public String getDetails() {
    return details;
  }

  public void setDetails(String details) {
    this.details = details;
  }

  public OfflineTicket slotDate(String slotDate) {
    this.slotDate = slotDate;
    return this;
  }

   /**
   * Applicable to timed ticketing
   * @return slotDate
  **/
  @Schema(description = "Applicable to timed ticketing")
  public String getSlotDate() {
    return slotDate;
  }

  public void setSlotDate(String slotDate) {
    this.slotDate = slotDate;
  }

  public OfflineTicket slotTime(String slotTime) {
    this.slotTime = slotTime;
    return this;
  }

   /**
   * Applicable to timed ticketing
   * @return slotTime
  **/
  @Schema(description = "Applicable to timed ticketing")
  public String getSlotTime() {
    return slotTime;
  }

  public void setSlotTime(String slotTime) {
    this.slotTime = slotTime;
  }

  public OfflineTicket seatCustom1(String seatCustom1) {
    this.seatCustom1 = seatCustom1;
    return this;
  }

   /**
   * Applicable to reserved seating
   * @return seatCustom1
  **/
  @Schema(description = "Applicable to reserved seating")
  public String getSeatCustom1() {
    return seatCustom1;
  }

  public void setSeatCustom1(String seatCustom1) {
    this.seatCustom1 = seatCustom1;
  }

  public OfflineTicket seatCustom2(String seatCustom2) {
    this.seatCustom2 = seatCustom2;
    return this;
  }

   /**
   * Applicable to reserved seating
   * @return seatCustom2
  **/
  @Schema(description = "Applicable to reserved seating")
  public String getSeatCustom2() {
    return seatCustom2;
  }

  public void setSeatCustom2(String seatCustom2) {
    this.seatCustom2 = seatCustom2;
  }

  public OfflineTicket seatSection(String seatSection) {
    this.seatSection = seatSection;
    return this;
  }

   /**
   * Applicable to reserved seating
   * @return seatSection
  **/
  @Schema(description = "Applicable to reserved seating")
  public String getSeatSection() {
    return seatSection;
  }

  public void setSeatSection(String seatSection) {
    this.seatSection = seatSection;
  }

  public OfflineTicket seatRow(String seatRow) {
    this.seatRow = seatRow;
    return this;
  }

   /**
   * Applicable to reserved seating
   * @return seatRow
  **/
  @Schema(description = "Applicable to reserved seating")
  public String getSeatRow() {
    return seatRow;
  }

  public void setSeatRow(String seatRow) {
    this.seatRow = seatRow;
  }

  public OfflineTicket seatNumber(Integer seatNumber) {
    this.seatNumber = seatNumber;
    return this;
  }

   /**
   * Applicable to reserved seating
   * @return seatNumber
  **/
  @Schema(description = "Applicable to reserved seating")
  public Integer getSeatNumber() {
    return seatNumber;
  }

  public void setSeatNumber(Integer seatNumber) {
    this.seatNumber = seatNumber;
  }

  public OfflineTicket canceled(Boolean canceled) {
    this.canceled = canceled;
    return this;
  }

   /**
   * Canceled / Voided ticket
   * @return canceled
  **/
  @Schema(description = "Canceled / Voided ticket")
  public Boolean isCanceled() {
    return canceled;
  }

  public void setCanceled(Boolean canceled) {
    this.canceled = canceled;
  }

  public OfflineTicket _scans(List<Scan> _scans) {
    this._scans = _scans;
    return this;
  }

  public OfflineTicket addScansItem(Scan _scansItem) {
    if (this._scans == null) {
      this._scans = new ArrayList<Scan>();
    }
    this._scans.add(_scansItem);
    return this;
  }

   /**
   * Array of ticket scan activity
   * @return _scans
  **/
  @Schema(description = "Array of ticket scan activity")
  public List<Scan> getScans() {
    return _scans;
  }

  public void setScans(List<Scan> _scans) {
    this._scans = _scans;
  }

  public OfflineTicket _scanPointConfig(ScanPointConfig _scanPointConfig) {
    this._scanPointConfig = _scanPointConfig;
    return this;
  }

   /**
   * Get _scanPointConfig
   * @return _scanPointConfig
  **/
  @Schema(description = "")
  public ScanPointConfig getScanPointConfig() {
    return _scanPointConfig;
  }

  public void setScanPointConfig(ScanPointConfig _scanPointConfig) {
    this._scanPointConfig = _scanPointConfig;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OfflineTicket offlineTicket = (OfflineTicket) o;
    return Objects.equals(this.offlineTicketId, offlineTicket.offlineTicketId) &&
        Objects.equals(this.testTicket, offlineTicket.testTicket) &&
        Objects.equals(this.barcode, offlineTicket.barcode) &&
        Objects.equals(this.name, offlineTicket.name) &&
        Objects.equals(this.price, offlineTicket.price) &&
        Objects.equals(this.details, offlineTicket.details) &&
        Objects.equals(this.slotDate, offlineTicket.slotDate) &&
        Objects.equals(this.slotTime, offlineTicket.slotTime) &&
        Objects.equals(this.seatCustom1, offlineTicket.seatCustom1) &&
        Objects.equals(this.seatCustom2, offlineTicket.seatCustom2) &&
        Objects.equals(this.seatSection, offlineTicket.seatSection) &&
        Objects.equals(this.seatRow, offlineTicket.seatRow) &&
        Objects.equals(this.seatNumber, offlineTicket.seatNumber) &&
        Objects.equals(this.canceled, offlineTicket.canceled) &&
        Objects.equals(this._scans, offlineTicket._scans) &&
        Objects.equals(this._scanPointConfig, offlineTicket._scanPointConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(offlineTicketId, testTicket, barcode, name, price, details, slotDate, slotTime, seatCustom1, seatCustom2, seatSection, seatRow, seatNumber, canceled, _scans, _scanPointConfig);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OfflineTicket {\n");
    
    sb.append("    offlineTicketId: ").append(toIndentedString(offlineTicketId)).append("\n");
    sb.append("    testTicket: ").append(toIndentedString(testTicket)).append("\n");
    sb.append("    barcode: ").append(toIndentedString(barcode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    slotDate: ").append(toIndentedString(slotDate)).append("\n");
    sb.append("    slotTime: ").append(toIndentedString(slotTime)).append("\n");
    sb.append("    seatCustom1: ").append(toIndentedString(seatCustom1)).append("\n");
    sb.append("    seatCustom2: ").append(toIndentedString(seatCustom2)).append("\n");
    sb.append("    seatSection: ").append(toIndentedString(seatSection)).append("\n");
    sb.append("    seatRow: ").append(toIndentedString(seatRow)).append("\n");
    sb.append("    seatNumber: ").append(toIndentedString(seatNumber)).append("\n");
    sb.append("    canceled: ").append(toIndentedString(canceled)).append("\n");
    sb.append("    _scans: ").append(toIndentedString(_scans)).append("\n");
    sb.append("    _scanPointConfig: ").append(toIndentedString(_scanPointConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
