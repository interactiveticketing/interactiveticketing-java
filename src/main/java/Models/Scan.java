/*
 * Developer API
 * Get your API Key from the [Dashboard](/dashboard/).<br/>Send all API requests with http header `X-API-Key: YOUR-API-KEY-HERE`.<br/>Base URL: `https://secure.interactiveticketing.com/developers/api/v1`<br/>Contact support@interactiveticketing.com for help.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package Models;

import java.util.Objects;
import Models.Device;
import Models.ScanPoint;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;

/**
 * Scan
 */

public class Scan {

  @SerializedName("scanId")
  private Integer scanId = null;

  @SerializedName("time")
  private String time = null;

  @SerializedName("gate")
  private String gate = null;

  @SerializedName("uploadTime")
  private String uploadTime = null;

  @SerializedName("method")
  private String method = null;

  @SerializedName("_scanPoint")
  private ScanPoint _scanPoint = null;

  @SerializedName("_device")
  private Device _device = null;
  public Scan scanId(Integer scanId) {
    this.scanId = scanId;
    return this;
  }

  

  /**
  * The scan ID
  * @return scanId
  **/
  @Schema(description = "The scan ID")
  public Integer getScanId() {
    return scanId;
  }
  public void setScanId(Integer scanId) {
    this.scanId = scanId;
  }
  public Scan time(String time) {
    this.time = time;
    return this;
  }

  

  /**
  * The scan time iso-8601
  * @return time
  **/
  @Schema(description = "The scan time iso-8601")
  public String getTime() {
    return time;
  }
  public void setTime(String time) {
    this.time = time;
  }
  public Scan gate(String gate) {
    this.gate = gate;
    return this;
  }

  

  /**
  * Gate name identifier string
  * @return gate
  **/
  @Schema(description = "Gate name identifier string")
  public String getGate() {
    return gate;
  }
  public void setGate(String gate) {
    this.gate = gate;
  }
  public Scan uploadTime(String uploadTime) {
    this.uploadTime = uploadTime;
    return this;
  }

  

  /**
  * The scan device sync time with server iso-8601
  * @return uploadTime
  **/
  @Schema(description = "The scan device sync time with server iso-8601")
  public String getUploadTime() {
    return uploadTime;
  }
  public void setUploadTime(String uploadTime) {
    this.uploadTime = uploadTime;
  }
  public Scan method(String method) {
    this.method = method;
    return this;
  }

  

  /**
  * Ticket format scanned: &#x60;single&#x60; | &#x60;mobile&#x60; | &#x60;passbook&#x60;
  * @return method
  **/
  @Schema(description = "Ticket format scanned: `single` | `mobile` | `passbook`")
  public String getMethod() {
    return method;
  }
  public void setMethod(String method) {
    this.method = method;
  }
  public Scan _scanPoint(ScanPoint _scanPoint) {
    this._scanPoint = _scanPoint;
    return this;
  }

  

  /**
  * Get _scanPoint
  * @return _scanPoint
  **/
  @Schema(description = "")
  public ScanPoint getScanPoint() {
    return _scanPoint;
  }
  public void setScanPoint(ScanPoint _scanPoint) {
    this._scanPoint = _scanPoint;
  }
  public Scan _device(Device _device) {
    this._device = _device;
    return this;
  }

  

  /**
  * Get _device
  * @return _device
  **/
  @Schema(description = "")
  public Device getDevice() {
    return _device;
  }
  public void setDevice(Device _device) {
    this._device = _device;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Scan scan = (Scan) o;
    return Objects.equals(this.scanId, scan.scanId) &&
        Objects.equals(this.time, scan.time) &&
        Objects.equals(this.gate, scan.gate) &&
        Objects.equals(this.uploadTime, scan.uploadTime) &&
        Objects.equals(this.method, scan.method) &&
        Objects.equals(this._scanPoint, scan._scanPoint) &&
        Objects.equals(this._device, scan._device);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(scanId, time, gate, uploadTime, method, _scanPoint, _device);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Scan {\n");
    
    sb.append("    scanId: ").append(toIndentedString(scanId)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    gate: ").append(toIndentedString(gate)).append("\n");
    sb.append("    uploadTime: ").append(toIndentedString(uploadTime)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    _scanPoint: ").append(toIndentedString(_scanPoint)).append("\n");
    sb.append("    _device: ").append(toIndentedString(_device)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
