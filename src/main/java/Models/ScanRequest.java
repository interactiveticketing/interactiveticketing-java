/*
 * Developer API
 * Get your API Key from the [Dashboard](/dashboard/).<br/>Send all API requests with http header `X-API-Key: YOUR-API-KEY-HERE`.<br/>Base URL: `https://secure.interactiveticketing.com/developers/api/v2`<br/>Contact support@interactiveticketing.com for help.
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package Models;

import java.util.Objects;
import java.util.Arrays;
import Models.ScanEvent;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ScanRequest
 */


public class ScanRequest {
  @SerializedName("barcode")
  private String barcode = null;

  @SerializedName("gate")
  private String gate = null;

  @SerializedName("scanEvents")
  private List<ScanEvent> scanEvents = null;

  public ScanRequest barcode(String barcode) {
    this.barcode = barcode;
    return this;
  }

   /**
   * The barcode string
   * @return barcode
  **/
  @Schema(description = "The barcode string")
  public String getBarcode() {
    return barcode;
  }

  public void setBarcode(String barcode) {
    this.barcode = barcode;
  }

  public ScanRequest gate(String gate) {
    this.gate = gate;
    return this;
  }

   /**
   * The gate string
   * @return gate
  **/
  @Schema(description = "The gate string")
  public String getGate() {
    return gate;
  }

  public void setGate(String gate) {
    this.gate = gate;
  }

  public ScanRequest scanEvents(List<ScanEvent> scanEvents) {
    this.scanEvents = scanEvents;
    return this;
  }

  public ScanRequest addScanEventsItem(ScanEvent scanEventsItem) {
    if (this.scanEvents == null) {
      this.scanEvents = new ArrayList<ScanEvent>();
    }
    this.scanEvents.add(scanEventsItem);
    return this;
  }

   /**
   * Array of ScanEvent configurations
   * @return scanEvents
  **/
  @Schema(description = "Array of ScanEvent configurations")
  public List<ScanEvent> getScanEvents() {
    return scanEvents;
  }

  public void setScanEvents(List<ScanEvent> scanEvents) {
    this.scanEvents = scanEvents;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScanRequest scanRequest = (ScanRequest) o;
    return Objects.equals(this.barcode, scanRequest.barcode) &&
        Objects.equals(this.gate, scanRequest.gate) &&
        Objects.equals(this.scanEvents, scanRequest.scanEvents);
  }

  @Override
  public int hashCode() {
    return Objects.hash(barcode, gate, scanEvents);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScanRequest {\n");
    
    sb.append("    barcode: ").append(toIndentedString(barcode)).append("\n");
    sb.append("    gate: ").append(toIndentedString(gate)).append("\n");
    sb.append("    scanEvents: ").append(toIndentedString(scanEvents)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
