/*
 * Developer API
 * Get your API Key from the [Dashboard](/dashboard/).<br/>Send all API requests with http header `X-API-Key: YOUR-API-KEY-HERE`.<br/>Base URL: `https://secure.interactiveticketing.com/developers/api/v4`<br/>Contact support@interactiveticketing.com for help.
 *
 * OpenAPI spec version: v4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package Api;

import InteractiveTicketing.ApiCallback;
import InteractiveTicketing.ApiClient;
import InteractiveTicketing.ApiException;
import InteractiveTicketing.ApiResponse;
import InteractiveTicketing.Configuration;
import InteractiveTicketing.Pair;
import InteractiveTicketing.ProgressRequestBody;
import InteractiveTicketing.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import Models.Event;
import Models.Order;
import Models.PaginatedCartEmails;
import Models.PaginatedOrders;
import Models.ScanRequest;
import Models.ScanResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for eventsEventIdAbandonedShoppingCartsGet
     * @param eventId ID of event to return (required)
     * @param fromCartEmailId Return entries with &#x60;cartEmailId&#x60; greater than &#x60;fromCartEmailId&#x60;. (optional)
     * @param email Return entries with matching email address. (optional)
     * @param start For pagination, return orders from &#x60;start&#x60; row index. (optional)
     * @param limit For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventsEventIdAbandonedShoppingCartsGetCall(Integer eventId, Integer fromCartEmailId, Integer email, Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events/{eventId}/abandonedShoppingCarts"
            .replaceAll("\\{" + "eventId" + "\\}", apiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromCartEmailId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fromCartEmailId", fromCartEmailId));
        if (email != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("email", email));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventsEventIdAbandonedShoppingCartsGetValidateBeforeCall(Integer eventId, Integer fromCartEmailId, Integer email, Integer start, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling eventsEventIdAbandonedShoppingCartsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = eventsEventIdAbandonedShoppingCartsGetCall(eventId, fromCartEmailId, email, start, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query Abandoned Shopping Cart Data
     * Returns paginated list of cart data from the event. The &#x60;cartEmailId&#x60; is not unique across all events. Use &#x60;fromCartEmailId&#x60; parameter to loop through orders if you are pulling down all data.
     * @param eventId ID of event to return (required)
     * @param fromCartEmailId Return entries with &#x60;cartEmailId&#x60; greater than &#x60;fromCartEmailId&#x60;. (optional)
     * @param email Return entries with matching email address. (optional)
     * @param start For pagination, return orders from &#x60;start&#x60; row index. (optional)
     * @param limit For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)
     * @return PaginatedCartEmails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaginatedCartEmails eventsEventIdAbandonedShoppingCartsGet(Integer eventId, Integer fromCartEmailId, Integer email, Integer start, Integer limit) throws ApiException {
        ApiResponse<PaginatedCartEmails> resp = eventsEventIdAbandonedShoppingCartsGetWithHttpInfo(eventId, fromCartEmailId, email, start, limit);
        return resp.getData();
    }

    /**
     * Query Abandoned Shopping Cart Data
     * Returns paginated list of cart data from the event. The &#x60;cartEmailId&#x60; is not unique across all events. Use &#x60;fromCartEmailId&#x60; parameter to loop through orders if you are pulling down all data.
     * @param eventId ID of event to return (required)
     * @param fromCartEmailId Return entries with &#x60;cartEmailId&#x60; greater than &#x60;fromCartEmailId&#x60;. (optional)
     * @param email Return entries with matching email address. (optional)
     * @param start For pagination, return orders from &#x60;start&#x60; row index. (optional)
     * @param limit For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)
     * @return ApiResponse&lt;PaginatedCartEmails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaginatedCartEmails> eventsEventIdAbandonedShoppingCartsGetWithHttpInfo(Integer eventId, Integer fromCartEmailId, Integer email, Integer start, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = eventsEventIdAbandonedShoppingCartsGetValidateBeforeCall(eventId, fromCartEmailId, email, start, limit, null, null);
        Type localVarReturnType = new TypeToken<PaginatedCartEmails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query Abandoned Shopping Cart Data (asynchronously)
     * Returns paginated list of cart data from the event. The &#x60;cartEmailId&#x60; is not unique across all events. Use &#x60;fromCartEmailId&#x60; parameter to loop through orders if you are pulling down all data.
     * @param eventId ID of event to return (required)
     * @param fromCartEmailId Return entries with &#x60;cartEmailId&#x60; greater than &#x60;fromCartEmailId&#x60;. (optional)
     * @param email Return entries with matching email address. (optional)
     * @param start For pagination, return orders from &#x60;start&#x60; row index. (optional)
     * @param limit For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventsEventIdAbandonedShoppingCartsGetAsync(Integer eventId, Integer fromCartEmailId, Integer email, Integer start, Integer limit, final ApiCallback<PaginatedCartEmails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventsEventIdAbandonedShoppingCartsGetValidateBeforeCall(eventId, fromCartEmailId, email, start, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaginatedCartEmails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for eventsEventIdGet
     * @param eventId ID of event to return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventsEventIdGetCall(Long eventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events/{eventId}"
            .replaceAll("\\{" + "eventId" + "\\}", apiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventsEventIdGetValidateBeforeCall(Long eventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling eventsEventIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = eventsEventIdGetCall(eventId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetch Event by ID
     * Get single event with &#x60;eventId&#x60;.
     * @param eventId ID of event to return (required)
     * @return Event
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Event eventsEventIdGet(Long eventId) throws ApiException {
        ApiResponse<Event> resp = eventsEventIdGetWithHttpInfo(eventId);
        return resp.getData();
    }

    /**
     * Fetch Event by ID
     * Get single event with &#x60;eventId&#x60;.
     * @param eventId ID of event to return (required)
     * @return ApiResponse&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Event> eventsEventIdGetWithHttpInfo(Long eventId) throws ApiException {
        com.squareup.okhttp.Call call = eventsEventIdGetValidateBeforeCall(eventId, null, null);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch Event by ID (asynchronously)
     * Get single event with &#x60;eventId&#x60;.
     * @param eventId ID of event to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventsEventIdGetAsync(Long eventId, final ApiCallback<Event> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventsEventIdGetValidateBeforeCall(eventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for eventsEventIdOrdersBarcodeBarcodeGet
     * @param eventId ID of event to return (required)
     * @param barcode Barcode from ticket of the order to return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventsEventIdOrdersBarcodeBarcodeGetCall(Long eventId, String barcode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events/{eventId}/orders/barcode/{barcode}"
            .replaceAll("\\{" + "eventId" + "\\}", apiClient.escapeString(eventId.toString()))
            .replaceAll("\\{" + "barcode" + "\\}", apiClient.escapeString(barcode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventsEventIdOrdersBarcodeBarcodeGetValidateBeforeCall(Long eventId, String barcode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling eventsEventIdOrdersBarcodeBarcodeGet(Async)");
        }
        // verify the required parameter 'barcode' is set
        if (barcode == null) {
            throw new ApiException("Missing the required parameter 'barcode' when calling eventsEventIdOrdersBarcodeBarcodeGet(Async)");
        }
        
        com.squareup.okhttp.Call call = eventsEventIdOrdersBarcodeBarcodeGetCall(eventId, barcode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetch Order by Barcode
     * Get single order with &#x60;eventId&#x60; and &#x60;barcode&#x60;.
     * @param eventId ID of event to return (required)
     * @param barcode Barcode from ticket of the order to return (required)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Order eventsEventIdOrdersBarcodeBarcodeGet(Long eventId, String barcode) throws ApiException {
        ApiResponse<Order> resp = eventsEventIdOrdersBarcodeBarcodeGetWithHttpInfo(eventId, barcode);
        return resp.getData();
    }

    /**
     * Fetch Order by Barcode
     * Get single order with &#x60;eventId&#x60; and &#x60;barcode&#x60;.
     * @param eventId ID of event to return (required)
     * @param barcode Barcode from ticket of the order to return (required)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Order> eventsEventIdOrdersBarcodeBarcodeGetWithHttpInfo(Long eventId, String barcode) throws ApiException {
        com.squareup.okhttp.Call call = eventsEventIdOrdersBarcodeBarcodeGetValidateBeforeCall(eventId, barcode, null, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch Order by Barcode (asynchronously)
     * Get single order with &#x60;eventId&#x60; and &#x60;barcode&#x60;.
     * @param eventId ID of event to return (required)
     * @param barcode Barcode from ticket of the order to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventsEventIdOrdersBarcodeBarcodeGetAsync(Long eventId, String barcode, final ApiCallback<Order> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventsEventIdOrdersBarcodeBarcodeGetValidateBeforeCall(eventId, barcode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for eventsEventIdOrdersGet
     * @param eventId ID of event to return (required)
     * @param fromOrderId Return orders with &#x60;orderId&#x60; greater than &#x60;fromOrderId&#x60;. (optional)
     * @param start For pagination, return orders from &#x60;start&#x60; row index. (optional)
     * @param limit For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)
     * @param testMode Query test orders only. (optional)
     * @param orderType To query only &#x60;web&#x60;, &#x60;pos&#x60;, or &#x60;kiosk&#x60; orders. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventsEventIdOrdersGetCall(Integer eventId, Integer fromOrderId, Integer start, Integer limit, Boolean testMode, String orderType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events/{eventId}/orders"
            .replaceAll("\\{" + "eventId" + "\\}", apiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fromOrderId", fromOrderId));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (testMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("testMode", testMode));
        if (orderType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderType", orderType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventsEventIdOrdersGetValidateBeforeCall(Integer eventId, Integer fromOrderId, Integer start, Integer limit, Boolean testMode, String orderType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling eventsEventIdOrdersGet(Async)");
        }
        
        com.squareup.okhttp.Call call = eventsEventIdOrdersGetCall(eventId, fromOrderId, start, limit, testMode, orderType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query Orders
     * Returns paginated list of orders from the event. The &#x60;orderId&#x60; is not unique across all events. Use &#x60;fromOrderId&#x60; parameter to loop through orders if you are pulling down all data.
     * @param eventId ID of event to return (required)
     * @param fromOrderId Return orders with &#x60;orderId&#x60; greater than &#x60;fromOrderId&#x60;. (optional)
     * @param start For pagination, return orders from &#x60;start&#x60; row index. (optional)
     * @param limit For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)
     * @param testMode Query test orders only. (optional)
     * @param orderType To query only &#x60;web&#x60;, &#x60;pos&#x60;, or &#x60;kiosk&#x60; orders. (optional)
     * @return PaginatedOrders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaginatedOrders eventsEventIdOrdersGet(Integer eventId, Integer fromOrderId, Integer start, Integer limit, Boolean testMode, String orderType) throws ApiException {
        ApiResponse<PaginatedOrders> resp = eventsEventIdOrdersGetWithHttpInfo(eventId, fromOrderId, start, limit, testMode, orderType);
        return resp.getData();
    }

    /**
     * Query Orders
     * Returns paginated list of orders from the event. The &#x60;orderId&#x60; is not unique across all events. Use &#x60;fromOrderId&#x60; parameter to loop through orders if you are pulling down all data.
     * @param eventId ID of event to return (required)
     * @param fromOrderId Return orders with &#x60;orderId&#x60; greater than &#x60;fromOrderId&#x60;. (optional)
     * @param start For pagination, return orders from &#x60;start&#x60; row index. (optional)
     * @param limit For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)
     * @param testMode Query test orders only. (optional)
     * @param orderType To query only &#x60;web&#x60;, &#x60;pos&#x60;, or &#x60;kiosk&#x60; orders. (optional)
     * @return ApiResponse&lt;PaginatedOrders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaginatedOrders> eventsEventIdOrdersGetWithHttpInfo(Integer eventId, Integer fromOrderId, Integer start, Integer limit, Boolean testMode, String orderType) throws ApiException {
        com.squareup.okhttp.Call call = eventsEventIdOrdersGetValidateBeforeCall(eventId, fromOrderId, start, limit, testMode, orderType, null, null);
        Type localVarReturnType = new TypeToken<PaginatedOrders>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query Orders (asynchronously)
     * Returns paginated list of orders from the event. The &#x60;orderId&#x60; is not unique across all events. Use &#x60;fromOrderId&#x60; parameter to loop through orders if you are pulling down all data.
     * @param eventId ID of event to return (required)
     * @param fromOrderId Return orders with &#x60;orderId&#x60; greater than &#x60;fromOrderId&#x60;. (optional)
     * @param start For pagination, return orders from &#x60;start&#x60; row index. (optional)
     * @param limit For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)
     * @param testMode Query test orders only. (optional)
     * @param orderType To query only &#x60;web&#x60;, &#x60;pos&#x60;, or &#x60;kiosk&#x60; orders. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventsEventIdOrdersGetAsync(Integer eventId, Integer fromOrderId, Integer start, Integer limit, Boolean testMode, String orderType, final ApiCallback<PaginatedOrders> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventsEventIdOrdersGetValidateBeforeCall(eventId, fromOrderId, start, limit, testMode, orderType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaginatedOrders>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for eventsEventIdOrdersOrderIdGet
     * @param eventId ID of event to return (required)
     * @param orderId ID of order to return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventsEventIdOrdersOrderIdGetCall(Long eventId, Long orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events/{eventId}/orders/{orderId}"
            .replaceAll("\\{" + "eventId" + "\\}", apiClient.escapeString(eventId.toString()))
            .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventsEventIdOrdersOrderIdGetValidateBeforeCall(Long eventId, Long orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling eventsEventIdOrdersOrderIdGet(Async)");
        }
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling eventsEventIdOrdersOrderIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = eventsEventIdOrdersOrderIdGetCall(eventId, orderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetch Order by ID
     * Get single order with &#x60;eventId&#x60; and &#x60;orderId&#x60;.
     * @param eventId ID of event to return (required)
     * @param orderId ID of order to return (required)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Order eventsEventIdOrdersOrderIdGet(Long eventId, Long orderId) throws ApiException {
        ApiResponse<Order> resp = eventsEventIdOrdersOrderIdGetWithHttpInfo(eventId, orderId);
        return resp.getData();
    }

    /**
     * Fetch Order by ID
     * Get single order with &#x60;eventId&#x60; and &#x60;orderId&#x60;.
     * @param eventId ID of event to return (required)
     * @param orderId ID of order to return (required)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Order> eventsEventIdOrdersOrderIdGetWithHttpInfo(Long eventId, Long orderId) throws ApiException {
        com.squareup.okhttp.Call call = eventsEventIdOrdersOrderIdGetValidateBeforeCall(eventId, orderId, null, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch Order by ID (asynchronously)
     * Get single order with &#x60;eventId&#x60; and &#x60;orderId&#x60;.
     * @param eventId ID of event to return (required)
     * @param orderId ID of order to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventsEventIdOrdersOrderIdGetAsync(Long eventId, Long orderId, final ApiCallback<Order> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventsEventIdOrdersOrderIdGetValidateBeforeCall(eventId, orderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for eventsGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventsGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventsGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = eventsGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List All Events
     * Get list of all your events with their &#x60;eventId&#x60;.
     * @return List&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Event> eventsGet() throws ApiException {
        ApiResponse<List<Event>> resp = eventsGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * List All Events
     * Get list of all your events with their &#x60;eventId&#x60;.
     * @return ApiResponse&lt;List&lt;Event&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Event>> eventsGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = eventsGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List All Events (asynchronously)
     * Get list of all your events with their &#x60;eventId&#x60;.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventsGetAsync(final ApiCallback<List<Event>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventsGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for scanPost
     * @param body List of user object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call scanPostCall(ScanRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/scan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call scanPostValidateBeforeCall(ScanRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling scanPost(Async)");
        }
        
        com.squareup.okhttp.Call call = scanPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Scan Ticket
     * Scan a ticket or third party barcode.
     * @param body List of user object (required)
     * @return ScanResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScanResponse scanPost(ScanRequest body) throws ApiException {
        ApiResponse<ScanResponse> resp = scanPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Scan Ticket
     * Scan a ticket or third party barcode.
     * @param body List of user object (required)
     * @return ApiResponse&lt;ScanResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScanResponse> scanPostWithHttpInfo(ScanRequest body) throws ApiException {
        com.squareup.okhttp.Call call = scanPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ScanResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Scan Ticket (asynchronously)
     * Scan a ticket or third party barcode.
     * @param body List of user object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call scanPostAsync(ScanRequest body, final ApiCallback<ScanResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = scanPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScanResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
