/*
 * Developer API
 * Get your API Key from the [Dashboard](/dashboard/).<br/>Send all API requests with http header `X-API-Key: YOUR-API-KEY-HERE`.<br/>Base URL: `https://secure.interactiveticketing.com/developers/api/v4`<br/>Contact support@interactiveticketing.com for help.
 *
 * OpenAPI spec version: v4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package Models;

import java.util.Objects;
import java.util.Arrays;
import Models.Client;
import Models.ScanPoint;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Event
 */


public class Event {
  @SerializedName("eventId")
  private Integer eventId = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("_client")
  private Client _client = null;

  @SerializedName("_scanPoints")
  private List<ScanPoint> _scanPoints = null;

  public Event eventId(Integer eventId) {
    this.eventId = eventId;
    return this;
  }

   /**
   * The event ID
   * @return eventId
  **/
  @Schema(description = "The event ID")
  public Integer getEventId() {
    return eventId;
  }

  public void setEventId(Integer eventId) {
    this.eventId = eventId;
  }

  public Event name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The event name
   * @return name
  **/
  @Schema(description = "The event name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Event status(String status) {
    this.status = status;
    return this;
  }

   /**
   * live | offline | completed
   * @return status
  **/
  @Schema(description = "live | offline | completed")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public Event _client(Client _client) {
    this._client = _client;
    return this;
  }

   /**
   * Get _client
   * @return _client
  **/
  @Schema(description = "")
  public Client getClient() {
    return _client;
  }

  public void setClient(Client _client) {
    this._client = _client;
  }

  public Event _scanPoints(List<ScanPoint> _scanPoints) {
    this._scanPoints = _scanPoints;
    return this;
  }

  public Event addScanPointsItem(ScanPoint _scanPointsItem) {
    if (this._scanPoints == null) {
      this._scanPoints = new ArrayList<ScanPoint>();
    }
    this._scanPoints.add(_scanPointsItem);
    return this;
  }

   /**
   * Array of ScanPoint
   * @return _scanPoints
  **/
  @Schema(description = "Array of ScanPoint")
  public List<ScanPoint> getScanPoints() {
    return _scanPoints;
  }

  public void setScanPoints(List<ScanPoint> _scanPoints) {
    this._scanPoints = _scanPoints;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Event event = (Event) o;
    return Objects.equals(this.eventId, event.eventId) &&
        Objects.equals(this.name, event.name) &&
        Objects.equals(this.status, event.status) &&
        Objects.equals(this._client, event._client) &&
        Objects.equals(this._scanPoints, event._scanPoints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventId, name, status, _client, _scanPoints);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Event {\n");
    
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    _client: ").append(toIndentedString(_client)).append("\n");
    sb.append("    _scanPoints: ").append(toIndentedString(_scanPoints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
